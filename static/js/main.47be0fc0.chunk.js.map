{"version":3,"sources":["project/minigame/tictactoe/function/get_winner.js","project/minigame/tictactoe/component/Square.js","project/minigame/tictactoe/component/Board.js","project/minigame/tictactoe/component/Game.js","project/minigame/tictactoe/function/bot_move.js","index.js"],"names":["getWinner","squares","line","a","b","c","Square","props","className","onClick","value","Board","renderSquare","i","id","onRestart","onBack","class","type","onChange","toggleBotPlay","defaultChecked","status","TicTacToeGame","useState","history","Array","fill","stepNumber","isXNext","state","setState","isPVP","setPVP","handleClick","slice","length","concat","jumpTo","step","useEffect","filter","move","botMove","current","winner","element","option","target","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47be0fc0.chunk.js","sourcesContent":["export default function getWinner(squares) {\r\n  if(!squares) return null;\r\n  let lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for(let line of lines){\r\n    let [a, b, c] = line;\r\n    if(squares[a] && squares[a]===squares[b] && squares[a]===squares[c]) return squares[a];\r\n  }\r\n  return null;\r\n}","export default function Square (props) {\r\n  return <button className=\"square\" onClick={props.onClick}>{props.value}</button>\r\n}","import Square from \"./Square\";\r\n\r\nexport default function Board (props) {\r\n  function renderSquare(i){\r\n    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />\r\n  }\r\n  return <div id=\"game-board\">\r\n    <div id=\"util\">\r\n      <button onClick={props.onRestart} id=\"restart-button\">Restart</button>\r\n      <button onClick={props.onBack} id=\"back-button\">Back</button>\r\n      <label class=\"toggle\">\r\n        <input type=\"checkbox\" onChange={props.toggleBotPlay} defaultChecked id=\"botplay-checkbox\"/>\r\n        <span class=\"slider\"></span>\r\n      </label>\r\n    </div>\r\n    <div id=\"board\">\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n    <h2 id=\"status\">{props.status}</h2>\r\n  </div>\r\n}","import { useState, useEffect } from \"react\";\r\nimport getWinner from \"../function/get_winner\";\r\nimport botMove from \"../function/bot_move\";\r\nimport \"../style/tictactoe.css\";\r\nimport Board from \"./Board\";\r\n\r\nexport default function TicTacToeGame (props) {\r\n  const [state, setState] = useState({\r\n    history: [{\r\n      squares: Array(9).fill(null)\r\n    }],\r\n    stepNumber: 0,\r\n    isXNext: true\r\n  });\r\n  const [isPVP, setPVP] = useState(false);\r\n  useEffect(()=>{\r\n    if(state.isXNext) return;\r\n    if(isPVP) return;\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    handleClick(botMove(squares));\r\n  });\r\n  function handleClick(i){\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (getWinner(squares) || squares[i] ) return;\r\n    squares[i] = state.isXNext ? 'X' : 'O';\r\n    setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber: history.length,\r\n      isXNext: !state.isXNext,\r\n    });\r\n  }\r\n  function jumpTo(step = state.history.length-3){\r\n    setState({\r\n      history: state.history,\r\n      stepNumber: step,\r\n      isXNext: (step % 2) === 0\r\n    });\r\n  }\r\n  function handleToggleBotPlay(element){\r\n    const option = !element.target.checked;\r\n    if(option === isPVP) return;\r\n    setPVP(option);\r\n    jumpTo(0);\r\n  }\r\n  const history = state.history;\r\n  const current = history[state.stepNumber];\r\n  const winner = getWinner(current.squares);\r\n  const status = winner ? 'Winner: ' + winner : 'Next player : ' + (state.isXNext ? 'X' : 'O');\r\n  return <div id=\"game-container\">\r\n    <Board squares={current.squares} status={status} onClick={handleClick} onRestart={() => jumpTo(0)} onBack={() => jumpTo()} toggleBotPlay={handleToggleBotPlay}/>\r\n  </div>\r\n}\r\n","export default function botMove(squares){\r\n  let lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for(let line of lines){\r\n    if(line.filter(move => squares[move]==='O').length===2) {\r\n      for(let i of line) {\r\n        if(!squares[i]) return i;\r\n      }\r\n    }\r\n    if(line.filter(move => squares[move]==='X').length===2) {\r\n      for(let i of line) {\r\n        if(!squares[i]) return i;\r\n      }\r\n    }\r\n  }\r\n  let random = [4, 5, 3, 1, 7, 0, 8, 6, 2];\r\n  for(let i of random){\r\n    if(!squares[i]) return i;\r\n  }\r\n}","import ReactDOM from 'react-dom';\r\nimport TicTacToeGame from './project/minigame/tictactoe/component/Game';\r\nimport './index.css';\r\nReactDOM.render(<TicTacToeGame />,document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}